ECE568Yifan Jiang	Jingzhi ZhaoThere are imperfect or even inappropriate ways of writing code and conducting tests, which may lead to corresponding potential risks and vulnerabilities in our programs, and may also affect the security of the user side once the server is applied on the network.The hazards we may encounter currently are listed below, and this document will be continuously updated later.Danger1. The entire file cache is shared, and we use multi-threaded processing for multi-user requests. So when multiple users access the same website, it may cause leakage of some user information because the website has internal cache.Danger2.The string buffer that held input from the remote server was constructed using a fixed-size character array. However, since there was no explicit limit on the size of the input that could be received in real-world scenarios, it was highly probable that the buffer would overflow. Such buffer overflows often result in the execution of code that is dictated by the attacker on the server, or the ability to read memory areas.Danger3.Proper and consistent user authorization is crucial. However, the program files, including the log file that can only be written as the root user, lack adequate access authentication measures. Additionally, the directory is writable by the server's user, which is usually "nobody" by default. This creates a significant risk in case of bugs in the code, particularly if a bug enables a remote user to execute arbitrary commands on the server, allowing them to gain root access. Merely adding permission requirements by running with "sudo" is not an ideal solution.Danger4.A "dual homed gateway" firewall machine can have a proxy installed that can see both sides of the firewall. When a user requests information from the web server, the proxy intercepts the request, forwards it to the server machine, and then returns the response to the requester. If the proxy is unreliable, it can create a security vulnerability in the firewall, potentially leading to malicious access from outside the network to the web server.Danger5.	Our program does not have any code or configuration designed to periodically check access and error log files for suspicious activity. Such activity may involve system commands or extremely long URL requests that attempt to overrun a program's input buffer. The former may indicate an attempt to trick the program into invoking a system command, while the latter may result in a buffer overflow.